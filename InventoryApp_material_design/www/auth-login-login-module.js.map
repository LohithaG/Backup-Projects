{"version":3,"sources":["webpack:///./src/app/+auth/login/login.component.html","webpack:///./src/app/+auth/login/login.component.ts","webpack:///./src/app/+auth/login/login.module.ts"],"names":[],"mappings":"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","file":"auth-login-login-module.js","sourcesContent":["module.exports = \"<div class=\\\"wrapper wrapper-full-page\\\">\\n    <div class=\\\"page-header login-page header-filter\\\" filter-color=\\\"black\\\" style=\\\"background-image: url('assets/img/background.jpg'); background-size: cover; background-position: top center;height: 100%;\\\">\\n        <div class=\\\"container\\\">\\n            <br><br><br><br>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-4 col-md-6 col-sm-6 ml-auto mr-auto\\\">\\n                    <!--<form [formGroup]=\\\"complexForm\\\" method=\\\"post\\\" *ngIf=\\\"userLogin\\\" class=\\\"smart-form client-form\\\">-->\\n                    <form [formGroup]=\\\"loginForm\\\" class=\\\"form ng-untouched ng-pristine ng-valid\\\" method=\\\"\\\" novalidate=\\\"\\\">\\n                        <div class=\\\"card card-login\\\">\\n                            <div class=\\\"card-header text-center\\\">\\n                                <img src=\\\"assets/img/logom.png\\\" width=\\\"100%\\\">\\n                            </div>\\n                            <div class=\\\"card-body \\\">\\n                                <span class=\\\"bmd-form-group\\\">\\n                                    <div class=\\\"input-group\\\">\\n                                        <input class=\\\"form-control\\\" placeholder=\\\"Username\\\" type=\\\"email\\\" [formControl]=\\\"this.email\\\"\\n                                            [(ngModel)]=\\\"userLogin.username\\\">\\n\\n                                    </div>\\n                                    <b *ngIf=\\\" this.email.hasError('required') &&submitted  \\\" class=\\\" text-danger \\\">Please\\n                                        enter valid email</b>\\n\\n                                    <b *ngIf=\\\" this.email.hasError('pattern') \\\" class=\\\" text-danger \\\">Please enter\\n                                        valid email</b>\\n                                </span>\\n                                <br>\\n                                <span class=\\\"bmd-form-group\\\">\\n                                    <div class=\\\"input-group\\\">\\n                                        <input class=\\\"form-control\\\" placeholder=\\\"Password\\\" type=\\\"password\\\"\\n                                            [formControl]=\\\"this.password\\\" [(ngModel)]=\\\"userLogin.password\\\">\\n                                    </div>\\n                                    <b *ngIf=\\\" this.password.hasError('required')  && submitted\\\" class=\\\" text-danger \\\">Please\\n                                        enter valid Password</b>\\n                                </span>\\n\\n                            </div>\\n                            <br>\\n                            <span style=\\\"color:red;text-align:center\\\">{{loginErrorMessage}}</span>\\n                            <div class=\\\"card-footer justify-content-center\\\">\\n                                <button mat-raised-button color=\\\"primary\\\" (click)=\\\"doLogin()\\\">Login</button>\\n                            </div>\\n                        </div>\\n                    </form>\\n                </div>\\n            </div>\\n        </div>\\n        <footer class=\\\"footer \\\">\\n            <div class=\\\"container\\\">\\n\\n\\n            </div>\\n        </footer>\\n    </div>\\n</div>\"","import { Component } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../auth.service';\nimport { FormsModule, FormBuilder, FormGroup, Validators, FormControl, AbstractControl, FormArray } from '@angular/forms';\n@Component({\n    selector: 'app-login',\n    templateUrl: 'login.component.html'\n})\n\nexport class LoginComponent {\n\n    public loginForm: FormGroup;\n    public email: AbstractControl;\n    public password: AbstractControl;\n    public otpNotification: string;\n    submitted: boolean;\n    userLogin = new UserLoginModel('', '');\n    loading: any;\n    loginErrorMessage: any;\n\n\n    constructor(\n        private readonly router: Router,\n        private readonly route: ActivatedRoute,\n        private readonly authService: AuthService,\n        private readonly fb: FormBuilder) {\n        this.loginForm = fb.group({\n            email: [null, Validators.compose([Validators.required,\n            Validators.pattern('^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$')])],\n            password: [null, Validators.compose([Validators.required])]\n        })\n        this.email = this.loginForm.controls['email'];\n        this.password = this.loginForm.controls['password'];\n    }\n\n\n    ngOnInit() {\n        localStorage.clear();\n        /**\n        * Back Button event trigger\n        */\n        history.pushState(null, null, location.href);\n        window.onpopstate = function (event) {\n            history.go(1);\n        };\n    }\n\n    /**\n     * Login\n     */\n    doLogin() {\n        if (this.loginForm.valid) {\n            this.userAuthentication()\n        } else {\n            this.submitted = true;\n        }\n    }\n\n\n\n    userAuthentication() {\n\n        this.submitted = true;\n        this.loading = true;\n        this.authService.login(this.userLogin.username, this.userLogin.password).subscribe(\n            (data: any) => {\n                if (data.data != null) {\n                    localStorage.setItem('userName', data.data.name)\n                    localStorage.setItem('userRole', data.data.roles[0].name);\n                    localStorage.setItem('currentUser', data.data.email);\n                    localStorage.setItem('userData', data.data.id);\n                    if (data.data.roles[0].name === 'INVENTORY_MANAG' || data.data.roles[0].name=== 'RETURN_MANAG' || data.data.roles[0].name=== 'PRODUCT_VERIFIER') {\n                        this.router.navigate(['/inventory']);\n                    } else if (data.data.roles[0].name === 'DISPATCHER') {\n                        this.router.navigate(['/dispatch']);\n                    }else{\n                        this.loading = false;\n                        this.loginErrorMessage = \"You Don't have access\";\n                        setTimeout(() => {\n                            this.loginErrorMessage = ''\n                        }, 3000);\n                    }\n                } else {\n                    this.loading = false;\n                    this.loginErrorMessage = 'Please enter valid credentials';\n                    setTimeout(() => {\n                        this.loginErrorMessage = ''\n                    }, 3000);\n                }\n                this.loading = false;\n            }, error => {\n                this.loading = false;\n                this.loginErrorMessage = 'Please enter valid credential';\n                setTimeout(() => {\n                    this.loginErrorMessage = ''\n                }, 3000);\n            });\n    }\n}\n\n\nexport class UserLoginModel {\n    constructor(\n        public username: string,\n        public password: string\n    ) { }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { LoginComponent } from './login.component';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCardModule} from '@angular/material/card';\n\n\nimport {\n    MatButtonModule,\n    MatInputModule,\n    MatRippleModule,\n    MatFormFieldModule,\n    MatTooltipModule,\n    MatSelectModule\n} from '@angular/material';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: LoginComponent\n    }\n]\n\n\n@NgModule({\n    imports: [\n        MatButtonModule,\n        MatRippleModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatTooltipModule,\n        MatSelectModule,\n        MatCardModule,\n        MatIconModule,\n        CommonModule,\n        [RouterModule.forChild(routes)],\n        FormsModule, \n        ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'}),\n    ],\n    declarations: [LoginComponent],\n    providers: [\n\n    ]\n})\nexport class LoginModule { }\n"],"sourceRoot":""}